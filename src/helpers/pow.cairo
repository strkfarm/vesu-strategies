use core::panic_with_felt252;

mod errors {
    pub const DECIMALS_OUT_OF_RANGE: felt252 = 'POW_DEC_TOO_LARGE';
}

const SCALE_U256: u256 = 1000000000000000000000000000;

// Lookup-table seems to be the most gas-efficient
pub fn ten_pow(power: u256) -> u256 {
    if power == 0 {
        1
    } else if power == 1 {
        10
    } else if power == 2 {
        100
    } else if power == 3 {
        1000
    } else if power == 4 {
        10000
    } else if power == 5 {
        100000
    } else if power == 6 {
        1000000
    } else if power == 7 {
        10000000
    } else if power == 8 {
        100000000
    } else if power == 9 {
        1000000000
    } else if power == 10 {
        10000000000
    } else if power == 11 {
        100000000000
    } else if power == 12 {
        1000000000000
    } else if power == 13 {
        10000000000000
    } else if power == 14 {
        100000000000000
    } else if power == 15 {
        1000000000000000
    } else if power == 16 {
        10000000000000000
    } else if power == 17 {
        100000000000000000
    } else if power == 18 {
        1000000000000000000
    } else if power == 19 {
        10000000000000000000
    } else if power == 20 {
        100000000000000000000
    } else if power == 21 {
        1000000000000000000000
    } else if power == 22 {
        10000000000000000000000
    } else if power == 23 {
        100000000000000000000000
    } else if power == 24 {
        1000000000000000000000000
    } else if power == 25 {
        10000000000000000000000000
    } else if power == 26 {
        100000000000000000000000000
    } else if power == 27 {
        1000000000000000000000000000
    } else if power == 28 {
        10000000000000000000000000000
    } else if power == 29 {
        100000000000000000000000000000
    } else if power == 30 {
        1000000000000000000000000000000
    } else if power == 31 {
        10000000000000000000000000000000
    } else if power == 32 {
        100000000000000000000000000000000
    } else if power == 33 {
        1000000000000000000000000000000000
    } else if power == 34 {
        10000000000000000000000000000000000
    } else if power == 35 {
        100000000000000000000000000000000000
    } else if power == 36 {
        1000000000000000000000000000000000000
    } else if power == 37 {
        10000000000000000000000000000000000000
    } else if power == 38 {
        100000000000000000000000000000000000000
    } else if power == 39 {
        1000000000000000000000000000000000000000
    } else if power == 40 {
        10000000000000000000000000000000000000000
    } else if power == 41 {
        100000000000000000000000000000000000000000
    } else if power == 42 {
        1000000000000000000000000000000000000000000
    } else if power == 43 {
        10000000000000000000000000000000000000000000
    } else if power == 44 {
        100000000000000000000000000000000000000000000
    } else if power == 45 {
        1000000000000000000000000000000000000000000000
    } else if power == 46 {
        10000000000000000000000000000000000000000000000
    } else if power == 47 {
        100000000000000000000000000000000000000000000000
    } else if power == 48 {
        1000000000000000000000000000000000000000000000000
    } else if power == 49 {
        10000000000000000000000000000000000000000000000000
    } else if power == 50 {
        100000000000000000000000000000000000000000000000000
    } else if power == 51 {
        1000000000000000000000000000000000000000000000000000
    } else if power == 52 {
        10000000000000000000000000000000000000000000000000000
    } else if power == 53 {
        100000000000000000000000000000000000000000000000000000
    } else if power == 54 {
        1000000000000000000000000000000000000000000000000000000
    } else if power == 55 {
        10000000000000000000000000000000000000000000000000000000
    } else if power == 56 {
        100000000000000000000000000000000000000000000000000000000
    } else if power == 57 {
        1000000000000000000000000000000000000000000000000000000000
    } else if power == 58 {
        10000000000000000000000000000000000000000000000000000000000
    } else if power == 59 {
        100000000000000000000000000000000000000000000000000000000000
    } else if power == 60 {
        1000000000000000000000000000000000000000000000000000000000000
    } else if power == 61 {
        10000000000000000000000000000000000000000000000000000000000000
    } else if power == 62 {
        100000000000000000000000000000000000000000000000000000000000000
    } else if power == 63 {
        1000000000000000000000000000000000000000000000000000000000000000
    } else if power == 64 {
        10000000000000000000000000000000000000000000000000000000000000000
    } else if power == 65 {
        100000000000000000000000000000000000000000000000000000000000000000
    } else if power == 66 {
        1000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 67 {
        10000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 68 {
        100000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 69 {
        1000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 70 {
        10000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 71 {
        100000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 72 {
        1000000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 73 {
        10000000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 74 {
        100000000000000000000000000000000000000000000000000000000000000000000000000
    } else if power == 75 {
        1000000000000000000000000000000000000000000000000000000000000000000000000000
    } else {
        panic_with_felt252(errors::DECIMALS_OUT_OF_RANGE)
    }
}

#[cfg(test)]
mod tests {

    #[test]
    fn test_ten_pow() {
        assert_eq!(@super::ten_pow(0), @1, "FAILED");
        assert_eq!(@super::ten_pow(1), @10, "FAILED");
        assert_eq!(@super::ten_pow(2), @100, "FAILED");
        assert_eq!(@super::ten_pow(3), @1000, "FAILED");
        assert_eq!(@super::ten_pow(4), @10000, "FAILED");
        assert_eq!(@super::ten_pow(5), @100000, "FAILED");
        assert_eq!(
            @super::ten_pow(75),
            @1000000000000000000000000000000000000000000000000000000000000000000000000000,
            "FAILED"
        );
    }

    #[test]
    #[should_panic(expected: ('POW_DEC_TOO_LARGE',))]
    fn test_ten_pow_overflow() {
        super::ten_pow(76);
    }
}